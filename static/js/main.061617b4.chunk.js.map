{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","Date","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.061617b4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li>\n          </ul>\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: \"Set title here\",\n  aboutText: \"About\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase!\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase!\", \"success\");\n  };\n\n  const handleClearClick = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Cleared!\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  // Credits: A\n  const handleCopy = () => {\n    navigator.clipboard.writeText(text);\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\n  };\n\n  // Credits: Coding Wala\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra spaces removed!\", \"success\");\n  };\n\n  const [text, setText] = useState(\"\");\n  // text = \"new text\"; // Wrong way to change the state\n  // setText(\"new text\"); // Correct way to change the state\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1 className=\"mb-4\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n            }}\n            id=\"myBox\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleUpClick}\n        >\n          Convert to Uppercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleLoClick}\n        >\n          Convert to Lowercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleClearClick}\n        >\n          Clear Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleCopy}\n        >\n          Copy Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleExtraSpaces}\n        >\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h2>Text summary</h2>\n        <p>\n          {\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length\n          }{\" \"}\n          words and {text.length} characters\n        </p>\n        <p>\n          {0.008 *\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length}{\" \"}\n          Minutes read\n        </p>\n        <h2>Preview The Text</h2>\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function About(props) {\n  // const [myStyle, setMyStyle] = useState({\n  //     color: 'black',\n  //     backgroundColor: 'white'\n  // })\n  let myStyle = {\n    color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n    backgroundColor: props.mode === \"dark\" ? \"rgb(36 74 104)\" : \"white\",\n  };\n\n  return (\n    <div className=\"container\">\n      <h1\n        className=\"my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        About Me and PlayWithText\n      </h1>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              style={myStyle}\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n            >\n              <strong>Harsh Shukla </strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              I am a Btech(Hons) in Civil Engineering branch from the Noida\n              Institute of Engineering and Technology. I have a sound knowledge\n              of C | C++| HTML5| CSS | JAVASCRIPT | REACT.JS | SQL/MYSQL | SDLC|\n              STLC | AUTOMATION TESTING | HC FACETS| UFT|. I can Handle work\n              effectively even under pressure and make the best of any\n              situation. A passionate individual with great interpersonal and\n              communication skills.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n            >\n              <strong>Easy to use </strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              PlayWithText is a free character counter tool that provides\n              instant character count & word count statistics for a given text.\n              PlayWithText reports the number of words and characters. Thus it\n              is suitable for writing text with word/ character limit.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n            >\n              <strong>Browser Compatibility </strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              This word counter software works in any web browsers such as\n              Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to\n              count characters in facebook, blog, books, excel document, pdf\n              document, essays, etc.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"PlayWithText\"\n          mode={mode}\n          toggleMode={toggleMode}\n          key={new Date()}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            {/* /users --> Component 1\n        /users/home --> Component 2 */}\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"PlayWithText - Convert Words, Word Counter, Copy Text\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}